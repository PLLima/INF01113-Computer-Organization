Mudanças:

Atualizado o ALU Control para as instruções de MULT e JR;
Adicionada operação multiplicação na ALU;
Adicionada saída dos bits superiores da multiplicação na ALU;
Adicionada saída IsMULT da ALU;
Adicionada barreira temporal para a etapa de EX/MEM do JR;
Adicionada barreira temporal para capturar valor de RS;
Adicionado MUX para o JR na entrada do PC;
Corrigidos os timings entre barreiras temporais para o sinal de IsMult;
Utilizado o sinal IsMult para não habilitar a escrita nos registradores;
Propagados todos os sinais de controle para as respectivas etapas do circuito:
  - BLTZ em MEM;
  - LB e SLTIU em WB;
Propagado o sinal de imediato com 32bits para a etapa de MEM;
Colocado comparador de menor que 0 ou menor que RS para instruções de BLTZ e SLTIU em MEM;
Conectado o BLTZ ao mux de branches;
Propagado o bit de comparação RS < Imed para o estágio de MEM;
Adicionado bit_extender para o resultado da comparação acima;
Conectado o resultado desse bit_extender na entrada de escrita dos GPRs;
Adicionado splitter para pegar os 8 bits menos significativos de um dado da memória;
Extendido esses 8 bits acima;
Conectado esse resultado controlado pelo sinal LB nos GPRs.

ROM para JR: 0x0241 end 0x00;
ROM para BLTZ: 0x0404 end 0x01;
ROM para LB: 0x0B18 end 0x20;
ROM para MULT: 0x0241 end 0x00;
ROM para SLTIU: 0x1300 end 0x0B;

Adicionados os sinais de controle: LB, SLTIU, BLTZ, JR e IsMult.

Testes:

JR: PC <- Reg1

0x8C010000; LW: Reg1 <- Mem[0] (64 ou 0x40)
0x00000000; NOP
0x00000000; NOP
0x00000000; NOP
0x00000000; NOP
0x00200008; JR: PC <- Reg1 (64 ou 0x40)

BLTZ: if Reg1 < 0 then PC += IMED*4 + 4 (IMED = 10)
0x8C010000; Reg1 <- Mem[0] (-1 (0xFFFFFFFF))
0x00000000; NOP
0x00000000; NOP
0x00000000; NOP
0x00000000; NOP
0x0420000A; PC += IMED*4 + 4 (PC = 64 ou 0x40)

LB: Reg1 <- byte(Mem[0]) (0x00000FFF)
0x80010000; Reg1 <- byte(Mem[0]) (0xFFFFFFFF)

MULT: HI, LO <- Reg1 * Reg2
0x8C010000; Reg1 <- Mem[0] (17 ou 0x11)
0x8C020001; Reg2 <- Mem[1] (256 ou 0x100)
0x00000000; NOP
0x00000000; NOP
0x00000000; NOP
0x00000000; NOP
0x00220018; HI, LO <- Reg1 * Reg2 (HI = 0, LO = 4352 ou 0x10400)

SLTIU: Reg1 <- Reg0 < IMED (1)
0x2C010001; Reg1 <- Reg0 < 1 (Reg1 = 1)